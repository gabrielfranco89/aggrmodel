?spread
??spread
?tidyr::spread
require(tidyr)
library(aggrmodel)
?aggrmodel
library(usethis)
library(devtools)
q()
n
packrat::off()
library(usethis)
proj_activate('~/Documents/git/aggrmodel/')
library(rmarkdown)
render('README.Rmd')
render('README.Rmd')
p
p
p1
p2
p
dd
p1
p2
p
p1
p1
p2
p
p1
p2
p
p1
p2
p2
p
p1
p
p <- system.file('/tmp/myeq')
p
p
install.packages('pdftools', repos='https://brieger.esalq.usp.br/CRAN/')
install.packages('pdftools', repos='https://brieger.esalq.usp.br/CRAN/')
plot(dchisq(1:10, 4))
plot(dchisq(0:10, 4))
plot(dchisq(0:10, 3))
plot(dchisq(seq(0,12, length.out=1000), 6))
plot(dchisq(seq(0,18, length.out=100), 6))
plot(dchisq(seq(0,32, length.out=100), 6))
plot(dd$y2)
plot(dd$y2)
plot(dd$y2)
plot(dd$y1)
dd
dd
plot(dd$y2)
plot(dd$y)
dd
dd
dd
dd$flag
dd
p
p+theme_void()
p+theme_void() + theme(legend.position="none")
p
pp
pp
p
p
use_logo('~/Pictures/aggrmodel.png')
library(rmarkdown)
render('README.Rmd')
library(oxygen2)
library(roxygen2)
roxygenise()
?require
roxygenise()
roxygenise()
?diag
?lm
summary.lm
structure(lm.D9)
names(lm.D9)
lm.D9$rank
lm.D9$xlevels
lm.D9$terms
X
X
plot(Y)
plot(Y)
plot(Y)
plot(Y)
dd
dd
fit
predict(fit)
points(predict(fit), col=2)
lines(predict(fit), col=2)
dim(X)
Xr
delta
betaK
betaK
beta
xbeta
plot(Y)
lines(xbeta,col=2)
Z
fit
yhat <- predict(fit)
yhat[1]
yhat[48]
render('/tmp/mailR.Rmd', output_dir='/tmp/')
q()
n
library(tidyverse)
library(Matrix)
rmarkdown::render('README.Rmd')
install.packages(rmarkdown)
install.packages('rmarkdown')
rmarkdown::render('README.Rmd')
load('~/Drive/01. Tese/thesis/R/data/PrimariesDataExampleWithoutCluster.RData')
df
packrat::off()
object <- fit
fit
fit
aggrmodel
fit
myfit
ls()
x <- 1
ls()
fit
aggrmodel
library(ggplot2)
?gather
q()
n
simuData
data(simuData)
simuData
df
df
df
mkt
market
df = subset(simuData, Cluster==1)
df
mkt = subset(market, Cluster==1)
mkt = subset(mkt, select=-Cluster)
aggrFit = aggrmodel(data = df, market = mkt, Y = Load, timeVar = Time, groupVar = Group, repVar = Rep, n_basis = 7)
packrat::off()
aggrFit = aggrmodel(data = df, market = mkt, Y = Load, timeVar = Time, groupVar = Group, repVar = Rep, n_basis = 7)
q()
n
packrat::set_opts(local.repos='~/R/x86_64-pc-linux-gnu-library/3.6/')
packrat::install_local('fda')
packrat::install_local(c('fda','Matrix','tidyr','ggplot2','dplyr'))
packrat::install_local(c('fda','tidyr','ggplot2','dplyr'))
df = subset(simuData, Cluster==1)
library(aggrmodel)
df = subset(simuData, Cluster==1)
mkt = subset(market, Cluster==1)
mkt = subset(mkt, select=-Cluster)
mkt
df
aggrFit = aggrmodel(data = df, market = mkt, Y = Load, timeVar = Time, groupVar = Group, repVar = Rep, n_basis = 7)
??dmvnorm
packrat::install_local(c('mvnorm'))
packrat::off()
??dmvnorm
packrat::install_local(c('mvtnorm'))
packrat::on()
packrat::install_local(c('mvtnorm'))
install.packages('mvtnorm')
aggrFit = aggrmodel(data = df, market = mkt, Y = Load, timeVar = Time, groupVar = Group, repVar = Rep, n_basis = 7)
plotMC(aggrFit)
object=aggrFit
require(ggplot2)
require(tidyr)
require(fda)
packrat::install_local(c('ggplot2'))
require(ggplot2)
install.packages('ggplot2',repos='https://brieger.esalq.usp.br/CRAN/')
require(ggplot2)
require(tidyr)
require(fda)
C <- length(unique(object$market[,2]))
t <- unique(object$timeVec)
basisObj = create.bspline.basis(range(t),
nbasis = object$n_basis,
norder = object$n_order)
B = predict(basisObj, t)
betaMtx <- cbind(beta=object$beta,
type=rep(1:C, each=object$n_basis))
betaMtx
mcMtx <- tapply(betaMtx[,1],
betaMtx[,2],
function(x) B %*% x)
mcMtx <- cbind(time=t, mcMtx)
plotMC <- function(object){
require(ggplot2)
require(tidyr)
require(fda)
C <- length(unique(object$market[,2]))
t <- unique(object$timeVec)
basisObj = create.bspline.basis(range(t),
nbasis = object$n_basis,
norder = object$n_order)
B = predict(basisObj, t)
betaMtx <- cbind(beta=object$beta,
type=rep(1:C, each=object$n_basis))
mcMtx <- tapply(betaMtx[,1],
betaMtx[,2],
function(x) B %*% x)
mcMtx <- cbind(time=t, mcMtx)
mcTidy <- gather(mcMtx,
key=type,
value=mc,
-time)
p <- ggplot(aes(x=time, y=mc)) +
geom_line() +
facet_wrap(.~type)
p
}
plotMC(aggrFit)
mcMtx <- cbind(time=t, mcMtx)
mcMtx
mcMtx <- tapply(betaMtx[,1],
betaMtx[,2],
function(x) B %*% x)
mcMtx
tmp = unlist(mcMtx)
tmp
length(tmp)
144/3
mcMtx <- data.frame(mc=unlist(mcMtx),
time=rep(t,times=C))
mcMtx
p <- ggplot(aes(x=time, y=mc), data=mcMtx) +
geom_line() +
facet_wrap(.~type)
betaMtx <- cbind(beta=object$beta,
type=rep(1:C, each=object$n_basis))
mcMtx <- tapply(betaMtx[,1],
betaMtx[,2],
function(x) B %*% x)
mcMtx <- data.frame(mc=unlist(mcMtx),
time=rep(t,times=C),
type=rep(1:C, each=length(t)))
mcMTx
mcMtx
p <- ggplot(aes(x=time, y=mc), data=mcMtx) +
geom_line() +
facet_wrap(.~type)
p
plotMC(aggrFit)
plotMC <- function(object){
require(ggplot2)
require(tidyr)
require(fda)
C <- length(unique(object$market[,2]))
t <- unique(object$timeVec)
basisObj = create.bspline.basis(range(t),
nbasis = object$n_basis,
norder = object$n_order)
B = predict(basisObj, t)
betaMtx <- cbind(beta=object$beta,
type=rep(1:C, each=object$n_basis))
mcMtx <- tapply(betaMtx[,1],
betaMtx[,2],
function(x) B %*% x)
mcMtx <- data.frame(mc=unlist(mcMtx),
time=rep(t,times=C),
type=rep(1:C, each=length(t)))
p <- ggplot(aes(x=time, y=mc), data=mcMtx) +
geom_line() +
facet_wrap(.~type)
p
}
plotMC(aggrFit)
packrat::off()
roxygen2::roxygenise()
View(betaMtx)
aggrFit$beta
as.matrix(aggrFit$beta)
str(aggrFit$market)
str(aggrFit$beta)
library(devtools)
packrat::off()
library(devtools)
build()
install()
build()
install()
library(aggrmodel)
dir('/tmp')
packrat::on()
install.packages('mvtnorm')
packrat::off()
df
mkt
1
